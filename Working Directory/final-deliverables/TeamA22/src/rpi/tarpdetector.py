# -*- coding: utf-8 -*-
"""TarpDetector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cuvZuzoVHKZSe-SauL9NXJvo23-6sQVB
"""

import cv2  # Import OpenCV for image processing
import numpy as np # Import NumPy for np array processing

# The below is a function that returns the center of a cluster of blue pixels
# If there is no blue in the image then it returns None

def detect_blue_cluster(img, lower_blue, upper_blue):
    # Create a binary mask using the specified blue color range in BGR format
    lower_blue = np.array([80, 0, 0])
    upper_blue = np.array([160, 75, 35])
    mask = cv2.inRange(img, lower_blue, upper_blue)
    mask = cv2.GaussianBlur(mask, (9, 9), 0)
    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Initialize variables to store blue cluster center and max contour area
    blue_cluster_center = None
    max_area = 0

    for contour in contours:
        area = cv2.contourArea(contour)
        if area > max_area:
            max_area = area
            M = cv2.moments(contour)
            if M["m00"] != 0:
                cX = int(M["m10"] / M["m00"])
                cY = int(M["m01"] / M["m00"])
                blue_cluster_center = (cX, cY)
    img_center = (img.shape[1] // 2, img.shape[0] // 2)
    offset1 = (img_center[0] - blue_cluster_center[0])
    offset2 = (img_center[1] - blue_cluster_center[1])
    blue_cluster_center[0] = blue_cluster_center[0] + offset1
    blue_cluster_center[1] = blue_cluster_center[1] + offset2
    return blue_cluster_center
